# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CRSTools
                                 A QGIS plugin
 Check, define and convert CRS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-05-25
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Hieu Van
        email                : hieuvan@disroot.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant, QFileInfo
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QTableWidgetItem
from qgis.core import QgsProject, QgsVectorFileWriter, QgsVectorLayer
from qgis.core import QgsCoordinateReferenceSystem as Hoh

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .crs_tools_dialog import CRSToolsDialog
from .convertDialog import ConvertVN2000Dialog
from .checkDialog import CoordSysCheckerDialog
from .defineDialog import DefineDialog

import os.path


class CRSTools:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CRSTools_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = CRSToolsDialog()
        self.dlg1 = CoordSysCheckerDialog()
        self.dlg2 = DefineDialog()
        self.dlg3 = ConvertVN2000Dialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CRS Tools')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'CRSTools')
        self.toolbar.setObjectName(u'CRSTools')

        # Create layer list
        self.layers = QgsProject.instance().mapLayers().values()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CRSTools', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/crs_tools/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CRS Tools'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CRS Tools'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()

        self.dlg.pushButton.clicked.connect(self.check)
        self.dlg.pushButton_2.clicked.connect(self.define)
        self.dlg.pushButton_3.clicked.connect(self.convert)

    def check(self):
        self.dlg.hide()

        class LayerInfo:
            name = ""
            crs = ""

        # Generate data table
        self.dlg1.tableWidget.clear()
        self.dlg1.tableWidget.setRowCount(len(self.layers))
        self.dlg1.tableWidget.setColumnCount(2)
        self.dlg1.tableWidget.setColumnWidth(0, 300)
        self.dlg1.tableWidget.horizontalHeader().setStretchLastSection(True)

        self.dlg1.tableWidget.setHorizontalHeaderItem(0, QTableWidgetItem("Layer name"))
        self.dlg1.tableWidget.setHorizontalHeaderItem(1, QTableWidgetItem("CRS"))

        # Iterate over all loaded layers
        layer_list = []
        layer_count = 0

        for layer in self.layers:
            layer_count += 1

            layer_list.append(LayerInfo)
            layer_list[layer_count - 1].name = layer.name()
            layer_list[layer_count - 1].crs = self.find_crs(layer)

            self.dlg1.tableWidget.setItem(layer_count - 1, 0, QTableWidgetItem(layer.name()))
            self.dlg1.tableWidget.setItem(layer_count - 1, 1, QTableWidgetItem(self.find_crs(layer)))

        self.dlg1.tableWidget.move(0, 0)

        def save_to_file():
            name = QFileDialog().getSaveFileName(self.dlg1, "Export result to CSV", "", "CSV file (*.csv)")
            if name[0] == "":
                return None

            save_file = open(name[0], 'w')

            for i in layer_list:
                save_file.write("%s,%s\n" % (i.name, i.crs))

            save_file.close()

        self.dlg1.show()
        self.dlg1.exec()

        self.dlg1.pushButton.clicked.connect(save_to_file)

        self.dlg.show()

    def define(self):
        self.dlg.hide()

        layer_list = []
        for layer in self.layers:
            if layer.type() == 0:
                layer_list.append(layer.name())

        self.dlg2.listWidget.clear()
        self.dlg2.listWidget.addItems(layer_list)

        htd = self.dlg2.comboBox.currentText()
        for f in self.layers:
            if f.type() == 0 and self.crs_object(f, htd) != 'System':
                f.setCrs(self.crs_object(f, htd))

        self.dlg2.show()
        self.dlg2.exec()
        self.dlg.show()

    def convert(self):
        self.dlg.hide()

        # Generate layer list
        layer_list = []

        for i in self.layers:
            if i.type() == 0:
                layer_list.append(i.name())

        self.dlg3.listWidget.clear()
        self.dlg3.listWidget.addItems(layer_list)
        self.dlg3.input_layer.addItems(layer_list)

        def convert_crs():

            def convert():
                crs_in = self.dlg3.comboBox_in.currentText()
                crs_out = self.dlg3.comboBox_out.currentText()

                save_dir = QFileDialog.getExistingDirectory(self.dlg3, 'Chọn thư mục để lưu / '
                                                                       'Choose folder to save converted CRS')

                def gen_output(out_type):
                    if out_type == '.shp':
                        drv = 'ESRI Shapefile'
                    else:
                        drv = 'MapInfo File'

                    for layer in self.layers:
                        export_crs = self.crs_object(layer, crs_out)
                        in_crs = self.crs_object(layer, crs_in)
                        if not in_crs == 'System':
                            layer.setCrs(in_crs)

                        if not save_dir == '':
                            QgsVectorFileWriter.writeAsVectorFormat(layer, '%s/%s%s' % (save_dir, layer.name(), out_type)
                                                                    , 'UTF-8', self.crs_object(layer, export_crs), drv)

                if self.dlg3.checkBox_esri.isChecked():
                    gen_output('.shp')
                if self.dlg3.checkBox_mi.isChecked():
                    gen_output('.tab')

                convert()

        def convert_font():
            filename = QFileDialog.getSaveFileName(self.dlg, u"Chọn thư mục và tên lớp đầu ra / "
                                                             u"Choose output directory and output layer name",
                                                   "", '*.shp')

            def convert(string, s, d):
                result = u''
                for c in string:
                    if c in s:
                        idx = s.index(c)
                        if idx >= 0:
                            c = d[idx]
                    result += c
                return result

            def encoding_table(encoding_name):
                # Character encoding declaration
                _Unicode = [
                    u'â', u'Â', u'ă', u'Ă', u'đ', u'Đ', u'ê', u'Ê', u'ô', u'Ô', u'ơ', u'Ơ', u'ư', u'Ư', u'á', u'Á', u'à',
                    u'À', u'ả', u'Ả', u'ã', u'Ã', u'ạ', u'Ạ',
                    u'ấ', u'Ấ', u'ầ', u'Ầ', u'ẩ', u'Ẩ', u'ẫ', u'Ẫ', u'ậ', u'Ậ', u'ắ', u'Ắ', u'ằ', u'Ằ', u'ẳ', u'Ẳ', u'ẵ',
                    u'Ẵ', u'ặ', u'Ặ',
                    u'é', u'É', u'è', u'È', u'ẻ', u'Ẻ', u'ẽ', u'Ẽ', u'ẹ', u'Ẹ', u'ế', u'Ế', u'ề', u'Ề', u'ể', u'Ể', u'ễ',
                    u'Ễ', u'ệ', u'Ệ', u'í', u'Í', u'ì', u'Ì', u'ỉ', u'Ỉ', u'ĩ', u'Ĩ', u'ị', u'Ị',
                    u'ó', u'Ó', u'ò', u'Ò', u'ỏ', u'Ỏ', u'õ', u'Õ', u'ọ', u'Ọ', u'ố', u'Ố', u'ồ', u'Ồ', u'ổ', u'Ổ', u'ỗ',
                    u'Ỗ', u'ộ', u'Ộ', u'ớ', u'Ớ', u'ờ', u'Ờ', u'ở', u'Ở', u'ỡ', u'Ỡ', u'ợ', u'Ợ',
                    u'ú', u'Ú', u'ù', u'Ù', u'ủ', u'Ủ', u'ũ', u'Ũ', u'ụ', u'Ụ', u'ứ', u'Ứ', u'ừ', u'Ừ', u'ử', u'Ử', u'ữ',
                    u'Ữ', u'ự', u'Ự', u'ỳ', u'Ỳ', u'ỷ', u'Ỷ', u'ỹ', u'Ỹ', u'ỵ', u'Ỵ', u'ý', u'Ý'
                ]
                _TCVN3 = [
                    u'©', u'¢', u'¨', u'¡', u'®', u'§', u'ª', u'£', u'«', u'¤', u'¬', u'¥', u'­', u'¦', u'¸', u'¸', u'µ',
                    u'µ', u'¶', u'¶', u'·', u'·', u'¹', u'¹',
                    u'Ê', u'Ê', u'Ç', u'Ç', u'È', u'È', u'É', u'É', u'Ë', u'Ë', u'¾', u'¾', u'»', u'»', u'¼', u'¼', u'½',
                    u'½', u'Æ', u'Æ',
                    u'Ð', u'Ð', u'Ì', u'Ì', u'Î', u'Î', u'Ï', u'Ï', u'Ñ', u'Ñ', u'Õ', u'Õ', u'Ò', u'Ò', u'Ó', u'Ó', u'Ô',
                    u'Ô', u'Ö', u'Ö', u'Ý', u'Ý', u'×', u'×', u'Ø', u'Ø', u'Ü', u'Ü', u'Þ', u'Þ',
                    u'ã', u'ã', u'ß', u'ß', u'á', u'á', u'â', u'â', u'ä', u'ä', u'è', u'è', u'å', u'å', u'æ', u'æ', u'ç',
                    u'ç', u'é', u'é', u'í', u'í', u'ê', u'ê', u'ë', u'ë', u'ì', u'ì', u'î', u'î',
                    u'ó', u'ó', u'ï', u'ï', u'ñ', u'ñ', u'ò', u'ò', u'ô', u'ô', u'ø', u'ø', u'õ', u'õ', u'ö', u'ö', u'÷',
                    u'÷', u'ù', u'ù', u'ú', u'ú', u'û', u'û', u'ü', u'ü', u'þ', u'þ', u'ý', u'ý'
                ]
                _KhongDau = [
                    u'a', u'A', u'a', u'A', u'd', u'D', u'e', u'E', u'o', u'O', u'o', u'O', u'u', u'U', u'a', u'A', u'a',
                    u'A', u'a', u'A', u'a', u'A', u'a', u'A',
                    u'a', u'A', u'a', u'A', u'a', u'A', u'a', u'A', u'a', u'A', u'a', u'A', u'a', u'A', u'a', u'A', u'a',
                    u'A', u'a', u'A',
                    u'e', u'E', u'e', u'E', u'e', u'E', u'e', u'E', u'e', u'E', u'e', u'E', u'e', 'uE', u'e', u'E', u'e',
                    u'E', u'e', u'E', u'i', u'I', u'i', u'I', u'i', u'I', u'i', u'I', u'i', u'I',
                    u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o',
                    u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O', u'o', u'O',
                    u'u', u'U', u'u', u'U', u'u', u'U', u'u', u'U', u'u', u'U', u'u', u'U', u'u', u'U', u'u', u'U', u'u',
                    u'U', u'u', u'U', u'y', u'Y', u'y', u'Y', u'y', u'Y', u'y', u'Y', u'y', u'Y'
                ]

                if encoding_name == "TCVN (ABC)":
                    return _TCVN3
                elif encoding_name == "Unicode":
                    return _Unicode
                else:
                    return _KhongDau

            selected_layer = self.layers[self.dlg3.input_layer.currentIndex()]
            font_in = self.dlg3.comboBox_font_in.currentText()
            font_out = self.dlg3.comboBox_font_out.currentText()

            shape_writer = QgsVectorFileWriter(filename, "UTF-8", selected_layer.dataProvider().fields()
                                               , selected_layer.dataProvider().geometryType(), selected_layer.crs())

            features = selected_layer.getFeatures()

            textfield = []
            for field in selected_layer.dataProvider().fields():
                if field.type() in [QVariant.String]:
                    textfield.append(field.name())

            for feat in features:
                for ab in textfield:
                    abc = feat[ab]
                    if abc != '' and not font_in == font_out:
                            feat[ab] = convert(abc, encoding_table(font_in), encoding_table(font_out))
                shape_writer.addFeature(feat)

            layer = QgsVectorLayer(filename, QFileInfo(filename).baseName(), 'ogr')
            layer.setProviderEncoding(u'System')
            layer.dataProvider().setEncoding(u'UTF-8')

        def execute():
            if self.dlg3.checkBox_crs.isChecked():
                convert_crs()
            if self.dlg3.checkBox_font.isChecked():
                convert_font()

        self.dlg3.show()
        self.dlg3.exec()

        self.dlg3.buttonBox.accepted.connect(execute)

        self.dlg.show()

    @staticmethod
    def crs_object(layer, crs_string):
        # CRS (Proj4 format) declaration

        # UTM & WGS 84
        htd_utm_48 = "+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs"
        htd_utm_49 = "+proj=utm +zone=49 +datum=WGS84 +units=m +no_defs"
        htd_4326 = "+proj=longlat +datum=WGS84 +no_defs"

        # VN-2000 Hoi nhap mui 3
        htd_102_hn = "+proj=tmerc +lat_0=0 +lon_0=102 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835,0.00928836," \
                     "-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_103_hn = "+proj=tmerc +lat_0=0 +lon_0=103 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_104_hn = "+proj=tmerc +lat_0=0 +lon_0=104 +k=0.9999 +x_0=500000 " \
                     "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                     "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_104_5_hn = "+proj=tmerc +lat_0=0 +lon_0=104.5 +k=0.9999 +x_0=500000 " \
                       "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                       "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_104_75_hn = "+proj=tmerc +lat_0=0 +lon_0=104.75 +k=0.9999 +x_0=500000 " \
                        "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                        "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_105_hn = "+proj=tmerc +lat_0=0 +lon_0=105 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_105_5_hn = "+proj=tmerc +lat_0=0 +lon_0=105.5 +k=0.9999 +x_0=500000 " \
                       "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                       "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_105_75_hn = "+proj=tmerc +lat_0=0 +lon_0=105.75 +k=0.9999 +x_0=500000 " \
                        "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                        "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_106_hn = "+proj=tmerc +lat_0=0 +lon_0=106 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_106_25_hn = "+proj=tmerc +lat_0=0 +lon_0=106.25 +k=0.9999 +x_0=500000 " \
                        "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                        "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_106_5_hn = "+proj=tmerc +lat_0=0 +lon_0=106.5 +k=0.9999 +x_0=500000 +y_0=0 " \
                       "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                       "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_hn = "+proj=tmerc +lat_0=0 +lon_0=107 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                     "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_25_hn = "+proj=tmerc +lat_0=0 +lon_0=107.25 +k=0.9999 +x_0=500000" \
                        " +y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                        "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_5_hn = "+proj=tmerc +lat_0=0 +lon_0=107.5 +k=0.9999 +x_0=500000 " \
                       "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                       "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_75_hn = "+proj=tmerc +lat_0=0 +lon_0=107.75 +k=0.9999 +x_0=500000" \
                        " +y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                        "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_108_hn = "+proj=tmerc +lat_0=0 +lon_0=108 +k=0.9999 +x_0=500000 +y_0=0" \
                     " +ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_108_25_hn = "+proj=tmerc +lat_0=0 +lon_0=108.25 +k=0.9999 +x_0=500000 " \
                        "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                        "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_108_5_hn = "+proj=tmerc +lat_0=0 +lon_0=108.5 +k=0.9999 +x_0=500000 " \
                       "+y_0=0 +ellps=WGS84 +towgs84=-191.90441429,-39.30318279," \
                       "-111.45032835,0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"

        # Create custom CRS objects
        crs_custom_102 = Hoh().fromProj4(htd_102_hn)
        crs_custom_103 = Hoh().fromProj4(htd_103_hn)
        crs_custom_104 = Hoh().fromProj4(htd_104_hn)
        crs_custom_104_5 = Hoh().fromProj4(htd_104_5_hn)
        crs_custom_104_75 = Hoh().fromProj4(htd_104_75_hn)
        crs_custom_105 = Hoh().fromProj4(htd_105_hn)
        crs_custom_105_5 = Hoh().fromProj4(htd_105_5_hn)
        crs_custom_105_75 = Hoh().fromProj4(htd_105_75_hn)
        crs_custom_106 = Hoh().fromProj4(htd_106_hn)
        crs_custom_106_25 = Hoh().fromProj4(htd_106_25_hn)
        crs_custom_106_5 = Hoh().fromProj4(htd_106_5_hn)
        crs_custom_107 = Hoh().fromProj4(htd_107_hn)
        crs_custom_107_25 = Hoh().fromProj4(htd_107_25_hn)
        crs_custom_107_5 = Hoh().fromProj4(htd_107_5_hn)
        crs_custom_107_75 = Hoh().fromProj4(htd_107_75_hn)
        crs_custom_108 = Hoh().fromProj4(htd_108_hn)
        crs_custom_108_25 = Hoh().fromProj4(htd_108_25_hn)
        crs_custom_108_5 = Hoh().fromProj4(htd_108_5_hn)

        if crs_string == "UTM Zone 48N - EPGS:32648":
            return Hoh().fromProj4(htd_utm_48)
        elif crs_string == 'System':
            return layer.crs()
        elif crs_string == "UTM Zone 49N - EPGS:32649":
            return Hoh().fromProj4(htd_utm_49)
        elif crs_string == "WGS 84 Lat/long - EPGS:4326":
            return Hoh().fromProj4(htd_4326)
        elif crs_string == "VN-2000 mui 3 KTT 102" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 102":
            return crs_custom_102
        elif crs_string == "VN-2000 mui 3 KTT 103" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 103":
            return crs_custom_103
        elif crs_string == "VN-2000 mui 3 KTT 104" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 104":
            return crs_custom_104
        elif crs_string == "VN-2000 mui 3 KTT 104.5" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 104.5":
            return crs_custom_104_5
        elif crs_string == "VN-2000 mui 3 KTT 104.75" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 104.75":
            return crs_custom_104_75
        elif crs_string == "VN-2000 mui 3 KTT 105" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 105":
            return crs_custom_105
        elif crs_string == "VN-2000 mui 3 KTT 105.5" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 105.5":
            return crs_custom_105_5
        elif crs_string == "VN-2000 mui 3 KTT 105.75" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 105.75":
            return crs_custom_105_75
        elif crs_string == "VN-2000 mui 3 KTT 106" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 106":
            return crs_custom_106
        elif crs_string == "VN-2000 mui 3 KTT 106.25" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 106.25":
            return crs_custom_106_25
        elif crs_string == "VN-2000 mui 3 KTT 106.5" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 106.5":
            return crs_custom_106_5
        elif crs_string == "VN-2000 mui 3 KTT 107" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 107":
            return crs_custom_107
        elif crs_string == "VN-2000 mui 3 KTT 107.25" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 107.25":
            return crs_custom_107_25
        elif crs_string == "VN-2000 mui 3 KTT 107.5" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 107.5":
            return crs_custom_107_5
        elif crs_string == "VN-2000 mui 3 KTT 107.75" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 107.75":
            return crs_custom_107_75
        elif crs_string == "VN-2000 mui 3 KTT 108" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 108":
            return crs_custom_108
        elif crs_string == "VN-2000 mui 3 KTT 108.25" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 108.25":
            return crs_custom_108_25
        elif crs_string == "VN-2000 mui 3 KTT 108.5" or crs_string == "VN-2000 Hoi nhap mui 3 KTT 108.5":
            return crs_custom_108_5

    @staticmethod
    def find_crs(layer_object):
        # Declaration of coordinate systems - Taken from checkcoordinatesystem plugin

        # VN2000 Noi bo mui 3
        htd_103_nb = "+proj=tmerc +lat_0=0 +lon_0=103 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_104_nb = "+proj=tmerc +lat_0=0 +lon_0=104 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_104_5_nb = "+proj=tmerc +lat_0=0 +lon_0=104.5 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                       "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_104_75_nb = "+proj=tmerc +lat_0=0 +lon_0=104.75 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                        "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_105_nb = "+proj=tmerc +lat_0=0 +lon_0=105 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_105_5_nb = "+proj=tmerc +lat_0=0 +lon_0=105.5 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                       "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_105_75_nb = "+proj=tmerc +lat_0=0 +lon_0=105.75 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                        "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_106_nb = "+proj=tmerc +lat_0=0 +lon_0=106 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_106_25_nb = "+proj=tmerc +lat_0=0 +lon_0=106.25 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                        "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_106_5_nb = "+proj=tmerc +lat_0=0 +lon_0=106.5 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                       "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_107_nb = "+proj=tmerc +lat_0=0 +lon_0=107 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_107_25_nb = "+proj=tmerc +lat_0=0 +lon_0=107.25 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                        "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_107_5_nb = "+proj=tmerc +lat_0=0 +lon_0=107.5 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                       "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_107_75_nb = "+proj=tmerc +lat_0=0 +lon_0=107.75 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                        "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_108_nb = "+proj=tmerc +lat_0=0 +lon_0=108 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_108_25_nb = "+proj=tmerc +lat_0=0 +lon_0=108.25 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                        "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
        htd_108_5_nb = "+proj=tmerc +lat_0=0 +lon_0=108.5 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                       "+towgs84=0,0,0,0,0,0,0 +units=m +no_defs"

        # VN2000 Hoi nhap mui 3
        htd_103_hn = "+proj=tmerc +lat_0=0 +lon_0=103 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=-191.90441429,-39.30318279,-111.45032835,0.00928836," \
                     "-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_104_hn = "+proj=tmerc +lat_0=0 +lon_0=104 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_104_5_hn = "+proj=tmerc +lat_0=0 +lon_0=104_5 +k=0.9999 +x_0=500000 +y_0=0 " \
                       "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                       "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_104_75_hn = "+proj=tmerc +lat_0=0 +lon_0=104.75 +k=0.9999 +x_0=500000 +y_0=0 " \
                        "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                        "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_105_hn = "+proj=tmerc +lat_0=0 +lon_0=105 +k=0.9999 +x_0=500000 +y_0=0 +ellps=WGS84 " \
                     "+towgs84=-191.90441429,-39.30318279,-111.45032835,0.00928836," \
                     "-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_105_5_hn = "+proj=tmerc +lat_0=0 +lon_0=105.5 +k=0.9999 +x_0=500000 +y_0=0 " \
                       "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                       "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_105_75_hn = "+proj=tmerc +lat_0=0 +lon_0=105.75 +k=0.9999 +x_0=500000 +y_0=0 " \
                        "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                        "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_106_hn = "+proj=tmerc +lat_0=0 +lon_0=106 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_106_25_hn = "+proj=tmerc +lat_0=0 +lon_0=106.25 +k=0.9999 +x_0=500000 +y_0=0 " \
                        "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                        "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_106_5_hn = "+proj=tmerc +lat_0=0 +lon_0=106.5 +k=0.9999 +x_0=500000 +y_0=0 " \
                       "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                       "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_hn = "+proj=tmerc +lat_0=0 +lon_0=107 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_25_hn = "+proj=tmerc +lat_0=0 +lon_0=107.25 +k=0.9999 +x_0=500000 +y_0=0 " \
                        "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                        "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_5_hn = "+proj=tmerc +lat_0=0 +lon_0=107.5 +k=0.9999 +x_0=500000 +y_0=0 " \
                       "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                       "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_107_75_hn = "+proj=tmerc +lat_0=0 +lon_0=107.75 +k=0.9999 +x_0=500000 +y_0=0 " \
                        "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                        "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_108_hn = "+proj=tmerc +lat_0=0 +lon_0=108 +k=0.9999 +x_0=500000 +y_0=0 " \
                     "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                     "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_108_25_hn = "+proj=tmerc +lat_0=0 +lon_0=108.25 +k=0.9999 +x_0=500000 +y_0=0 " \
                        "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                        "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"
        htd_108_5_hn = "+proj=tmerc +lat_0=0 +lon_0=108.5 +k=0.9999 +x_0=500000 +y_0=0 " \
                       "+ellps=WGS84 +towgs84=-191.90441429,-39.30318279,-111.45032835," \
                       "0.00928836,-0.01975479,0.00427372,0.252906278 +units=m +no_defs"

        # UTM 48, 49
        htd_utm_48 = "+proj=utm +zone=48 +datum=WGS84 +units=m +no_defs"
        htd_utm_49 = "+proj=utm +zone=49 +datum=WGS84 +units=m +no_defs"

        # WGS84 Lat/Long - 4326
        htd_latlong_4326 = "+proj=longlat +datum=WGS84 +no_defs"

        if layer_object.crs().toProj4() == htd_103_nb:
            return "VN-2000 Noi bo KTT 103 mui 3"
        elif layer_object.crs().toProj4() == htd_104_nb:
            return "VN-2000 Noi bo KTT 104 mui 3"
        elif layer_object.crs().toProj4() == htd_104_5_nb:
            return "VN-2000 Noi bo KTT 104.5 mui 3"
        elif layer_object.crs().toProj4() == htd_104_75_nb:
            return "VN-2000 Noi bo KTT 104.75 mui 3"
        elif layer_object.crs().toProj4() == htd_105_nb:
            return "VN-2000 Noi bo KTT 105 mui 3"
        elif layer_object.crs().toProj4() == htd_105_5_nb:
            return "VN-2000 Noi bo KTT 105.5 mui 3"
        elif layer_object.crs().toProj4() == htd_105_75_nb:
            return "VN-2000 Noi bo KTT 105.75 mui 3"
        elif layer_object.crs().toProj4() == htd_106_nb:
            return "VN-2000 Noi bo KTT 106 mui 3"
        elif layer_object.crs().toProj4() == htd_106_25_nb:
            return "VN-2000 Noi bo KTT 106.25 mui 3"
        elif layer_object.crs().toProj4() == htd_106_5_nb:
            return "VN-2000 Noi bo KTT 106.5 mui 3"
        elif layer_object.crs().toProj4() == htd_107_nb:
            return "VN-2000 Noi bo KTT 107 mui 3"
        elif layer_object.crs().toProj4() == htd_107_25_nb:
            return "VN-2000 Noi bo KTT 107.25 mui 3"
        elif layer_object.crs().toProj4() == htd_107_5_nb:
            return "VN-2000 Noi bo KTT 107.5 mui 3"
        elif layer_object.crs().toProj4() == htd_107_75_nb:
            return "VN-2000 Noi bo KTT 107.75 mui 3"
        elif layer_object.crs().toProj4() == htd_108_nb:
            return "VN-2000 Noi bo KTT 108 mui 3"
        elif layer_object.crs().toProj4() == htd_108_25_nb:
            return "VN-2000 Noi bo KTT 108.25 mui 3"
        elif layer_object.crs().toProj4() == htd_108_5_nb:
            return "VN-2000 Noi bo KTT 108.5 mui 3"
        elif layer_object.crs().toProj4() == htd_103_hn:
            return "VN-2000 Hoi nhap KTT 103 mui 3"
        elif layer_object.crs().toProj4() == htd_104_hn:
            return "VN-2000 Hoi nhap KTT 104 mui 3"
        elif layer_object.crs().toProj4() == htd_104_5_hn:
            return "VN-2000 Hoi nhap KTT 104.5 mui 3"
        elif layer_object.crs().toProj4() == htd_104_75_hn:
            return "VN-2000 Hoi nhap KTT 104.75 mui 3"
        elif layer_object.crs().toProj4() == htd_105_hn:
            return "VN-2000 Hoi nhap KTT 105 mui 3"
        elif layer_object.crs().toProj4() == htd_105_5_hn:
            return "VN-2000 Hoi nhap KTT 105.5 mui 3"
        elif layer_object.crs().toProj4() == htd_105_75_hn:
            return "VN-2000 Hoi nhap KTT 105.75 mui 3"
        elif layer_object.crs().toProj4() == htd_106_hn:
            return "VN-2000 Hoi nhap KTT 106 mui 3"
        elif layer_object.crs().toProj4() == htd_106_25_hn:
            return "VN-2000 Hoi nhap KTT 106.25 mui 3"
        elif layer_object.crs().toProj4() == htd_106_5_hn:
            return "VN-2000 Hoi nhap KTT 106.5 mui 3"
        elif layer_object.crs().toProj4() == htd_107_hn:
            return "VN-2000 Hoi nhap KTT 107 mui 3"
        elif layer_object.crs().toProj4() == htd_107_25_hn:
            return "VN-2000 Hoi nhap KTT 107.25 mui 3"
        elif layer_object.crs().toProj4() == htd_107_5_hn:
            return "VN-2000 Hoi nhap KTT 107.5 mui 3"
        elif layer_object.crs().toProj4() == htd_107_75_hn:
            return "VN-2000 Hoi nhap KTT 107.75 mui 3"
        elif layer_object.crs().toProj4() == htd_108_hn:
            return "VN-2000 Hoi nhap KTT 108 mui 3"
        elif layer_object.crs().toProj4() == htd_108_25_hn:
            return "VN-2000 Hoi nhap KTT 108.25 mui 3"
        elif layer_object.crs().toProj4() == htd_108_5_hn:
            return "VN-2000 Hoi nhap KTT 108.5 mui 3"
        elif layer_object.crs().toProj4() == htd_utm_48:
            return "UTM Zone 48N - EPSG:32648"
        elif layer_object.crs().toProj4() == htd_utm_49:
            return "UTM Zone 49N - EPSG:32649"
        elif layer_object.crs().toProj4() == htd_latlong_4326:
            return "WGS 84 Lat/Long - EPSG:4326"
